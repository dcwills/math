
//package permutation
//
//import (
//	"fmt"
//	"github.com/stretchr/testify/assert"
//	"strconv"
//	"strings"
//	"testing"
//)
//
//// this will succeed if a is a permutation of [0..k], where k=len(a)-1
//func isPermutationOfRange(a []int) bool {
//	test := make([]bool, len(a))
//	for _, v := range a {
//		if test[v] {
//			return false
//		}
//		test[v] = true
//	}
//	return true
//}
//
//// implements the Parks-Wills ranking of a permutation.
//// this maps a permutation of 1..n to x \in Z, where 0 <= x < n!
//func rankArray(arr []int) int {
//	r := 0
//	s := make([]string, len(arr)-1)
//	for k, x := range arr {
//		if k != 0 {
//			s[k-1] = strconv.Itoa(x)
//		}
//	}
//	perm := strings.Join(s, " ")
//	for k := len(arr) - 1; k > 1; k-- {
//		i := arr[k]
//		for i > k {
//			i = arr[i]
//		}
//		arr[k] = i // makes this O(n) and not O(n^2)
//		r = (k - i) + k*r
//	}
//	fmt.Printf("%03d", r)
//	fmt.Println(": ", perm)
//	return r
//}
//
//// verifies that heapPermutation tries every possible permutation exactly once.
//func Test_HeapPermutation(t *testing.T) {
//	intArray := []int{1, 2, 3, 4, 5, 6}
//	array := make([]interface{}, len(intArray))
//	for i, v := range intArray {
//		array[i] = v
//	}
//	var answer []int
//	run := func(t *testing.T, a []interface{}) {
//		arr := make([]int, len(a)+1)
//		for i, v := range a {
//			arr[i+1] = v.(int)
//		}
//		answer = append(answer, rankArray(arr))
//	}
//
//	type args struct {
//		run  permutationTest
//		a    []interface{}
//		size int
//	}
//	tests := []struct {
//		name string
//		args args
//	}{
//		{
//			"basic test",
//			args{
//				run,
//				array,
//				len(array),
//			},
//		},
//	}
//	var factorial = []int{1, 1, 2, 6, 24, 120, 720, 5040}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			HeapPermutation(t, tt.args.run, tt.args.a, tt.args.size)
//
//			// if answer is a permutation of 0 .. n!, we have hit all permutations.
//			assert.Equal(t, factorial[len(array)], len(answer))
//			assert.True(t, isPermutationOfRange(answer))
//		})
//	}
//}
